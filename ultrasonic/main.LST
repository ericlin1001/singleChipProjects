C51 COMPILER V9.01   MAIN                                                                  09/14/2013 08:27:45 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: J:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<stdlib.h>
   2          #include "header.h"
   3          #include "key8.h"
   4          #include "algorithm.h"
   5          #include "ultrasonic.h"
   6          #include "motor.h"
   7          #include <math.h>
   8          #define LIMIT(x,min,max) if(x>max)x=max;else if(x<min)x=min;
   9          //
  10          void tt();
  11          
  12          //global variables: 
  13          volatile TimeType t0=0xffff,t1=0xffff,dt1=0,st1=0; //TimeType is s16
  14          volatile s16 speed=1000;
  15          volatile s16 angle=0;//-14~14
  16          volatile uchar isStart=0;
  17          
  18          void ultrasonicOk1(TimeType durTime){
  19   1      if(durTime>2000)durTime=2000;
  20   1      //t1=filterData(timeBuffer1,durTime,&pBuffer1);
  21   1      
  22   1        //restricted contrain.
  23   1        if(durTime<0)durTime=0;
  24   1        if(durTime>1000)durTime=1000;
  25   1        
  26   1        dt1=durTime-t1;
  27   1        t1=durTime;
  28   1        tt();
  29   1      }
  30          void ultrasonicOk0(TimeType durTime){
  31   1      if(durTime>2000)durTime=2000;
  32   1      
  33   1      //t0=filterData(timeBuffer0,durTime,&pBuffer0);
  34   1        t0=durTime;
  35   1        tt();
  36   1        
  37   1      }
  38          //**************************
  39          
  40          
  41          void error();
  42          
  43          
  44          #define DIST 500
  45          s16 f1(s16 x){
  46   1        x/=10;
  47   1        x-=30;
  48   1        if(x>20)x=20;
  49   1        x*=x;
  50   1        x/=28;
  51   1        return x;
  52   1      }
  53          s16 f2(s16 x1,s16 x2){
  54   1        return 0;
  55   1      }
C51 COMPILER V9.01   MAIN                                                                  09/14/2013 08:27:45 PAGE 2   

*** WARNING C280 IN LINE 53 OF MAIN.C: 'x1': unreferenced local variable
*** WARNING C280 IN LINE 53 OF MAIN.C: 'x2': unreferenced local variable
  56          s16 keepDist(s16 x){
  57   1        s16 an;
  58   1        s16 e;
  59   1        s16 r=1;
  60   1        e=x-DIST;
  61   1        st1=e+st1;
  62   1        if(e<0){
  63   2          r=-1;
  64   2          e=-e;
  65   2        }
  66   1        if(0<=e && e<100)an=1;
  67   1        else if(100<=e && e<200)an=2;
  68   1        else if(200<=e && e<300)an=4;
  69   1        else if(300<=e && e<400)an=6;
  70   1        else if(400<=e && e<=500)an=7;
  71   1        else an=1;
  72   1        an=r*an;
  73   1        return an;
  74   1      }
  75          /*
  76          void controller(){
  77            angle=keepDist(t1);
  78          
  79            //angle=(t1-DIST)/20;
  80            LIMIT(angle,-14,14);
  81            doAngle(angle);
  82          }*/
  83          
  84          
  85          void controller(){
  86   1        if(dt1>DIST){
  87   2        //dt1:300~10000
  88   2          if(t0<DIST*2){
  89   3            angle=10;
  90   3          }else{
  91   3            angle=f1(dt1);
  92   3          }
  93   2        }else{
  94   2          //if(DIST/5<t1 && t1 <2*DIST){
  95   2            angle=keepDist(t1);
  96   2          
  97   2            if(t0>DIST){
  98   3              angle=keepDist(t1);
  99   3            }else{
 100   3              angle=-4;
 101   3            }
 102   2          //}else{   
 103   2            //error();//!!!
 104   2          //}
 105   2        }
 106   1        LIMIT(angle,-14,14);
 107   1        doAngle(angle);
 108   1      }
 109          
 110          void error(){
 111   1      //not exit.
 112   1        EA=0;
 113   1        while(1){
 114   2          doMotor(0,500);
 115   2          doAngle(-14);
C51 COMPILER V9.01   MAIN                                                                  09/14/2013 08:27:45 PAGE 3   

 116   2          doMotor(0,500);
 117   2          doAngle(14);
 118   2        }
 119   1        while(1);
 120   1      }
 121          
 122          volatile uchar receiveCount=0;
 123          void tt(){
 124   1        if(!isStart){
 125   2          receiveCount++;
 126   2          //doMotor(t1*3,2);
 127   2        }else{
 128   2          controller();
 129   2        }
 130   1      }
 131          
 132          void initAction(){
 133   1        receiveCount=0;
 134   1        isStart=0;
 135   1        //
 136   1        doMotor(speed,100); 
 137   1        doAngle(-14);
 138   1        mydelay(500);
 139   1        ultrasonicTrigger0();
 140   1        ultrasonicTrigger1();
 141   1        doAngle(14);
 142   1        mydelay(500);
 143   1        ultrasonicTrigger0();
 144   1        ultrasonicTrigger1();
 145   1        doAngle(0);
 146   1        mydelay(500);
 147   1        ultrasonicTrigger0();
 148   1        ultrasonicTrigger1();
 149   1        mydelay(500);
 150   1        while(receiveCount<6){
 151   2          ultrasonicTrigger0();
 152   2          ultrasonicTrigger1();
 153   2        }
 154   1        /*doAngle(-14);
 155   1        mydelay(500);
 156   1        doAngle(14);
 157   1        mydelay(500);*/
 158   1        isStart=1;
 159   1      }
 160            
 161          void main(void){
 162   1        s16 a=0;
 163   1        init();
 164   1        //error();
 165   1        speed=1000;
 166   1        initAction();
 167   1        while(1){
 168   2          P0_1=1;
 169   2          //controller();
 170   2          ultrasonicTrigger0();
 171   2          ultrasonicTrigger1();
 172   2          P0_1=0;
 173   2          doMotor(speed,2); //this should be invovked periodedly,to let motor runs continuously.
 174   2        }
 175   1        while(1);
 176   1      }

C51 COMPILER V9.01   MAIN                                                                  09/14/2013 08:27:45 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1313    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
