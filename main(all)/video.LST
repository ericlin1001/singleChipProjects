C51 COMPILER V9.01   VIDEO                                                                 08/15/2013 04:13:17 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE VIDEO
OBJECT MODULE PLACED IN video.OBJ
COMPILER INVOKED BY: J:\Keil\C51\BIN\C51.EXE video.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "header.h"
   2          #include "video.h"
   3          //#include "led.h"
   4          #include "key8.h"
   5          ulong mainLoopCount=0;
   6          
   7          /***********************LCD***************/
   8          
   9          /************application interface******/
  10          u16 LCD_bkColor=LCD_RGB_BALCK;
  11          u16 LCD_fgColor=LCD_RGB(0xffffff);
  12          u8 curX=0,curY=0;
  13          BOOL isShowCursor=FALSE;
  14          /*****/
  15          u16 LCD_getBkColor(){return LCD_bkColor;}
  16          u16 LCD_getTextColor(){return LCD_fgColor;}
  17          void LCD_setTextColor(u16 color){LCD_fgColor=color;}
  18          void LCD_setBkColor(u16 color){LCD_bkColor=color;}
  19          void LCD_init(void){
  20   1      P2 = 0xff;
  21   1      LCD_DATA = 0xff;
  22   1      LCD_basic_init();
  23   1      LCD_clear(LCD_bkColor);
  24   1      }
  25          void nextLine(){
  26   1          curY++;
  27   1          if(curY>=LCD_CHAR_LEN_Y){
  28   2            curY=0;
  29   2          }
  30   1          curX=0;
  31   1      }
  32          
  33          void LCD_putChar(char ch){
  34   1        LCD_ShowChar((uint)curX*CHAR_W,(uint)curY*CHAR_H,LCD_fgColor,LCD_bkColor,ch);
  35   1        curX++;
  36   1        if(curX>=LCD_CHAR_LEN_X){
  37   2          curX-=LCD_CHAR_LEN_X;
  38   2          curY++;
  39   2          if(curY>=LCD_CHAR_LEN_Y){
  40   3            curY=0;
  41   3          }
  42   2        }
  43   1        if(isShowCursor)LCD_ShowChar((uint)curX*CHAR_W,(uint)curY*CHAR_H,LCD_fgColor,LCD_bkColor,'_');
  44   1      }
  45          
  46          void LCD_printf(char *str){
  47   1      while(*str){
  48   2      if(*str=='\n'){
  49   3      LCD_ShowChar((uint)curX*CHAR_W,(uint)curY*CHAR_H,LCD_fgColor,LCD_bkColor,' ');
  50   3      nextLine();
  51   3      str++;
  52   3      }else{
  53   3      LCD_putChar(*str++);
  54   3      }
  55   2      }
C51 COMPILER V9.01   VIDEO                                                                 08/15/2013 04:13:17 PAGE 2   

  56   1      }
  57          /************end application interface******/
  58          
  59          /************middle-level interface******/
  60           void  LCD_basic_init(void)
  61          {
  62   1        LCD_RST=1;
  63   1        delayms(5); 
  64   1        LCD_RST=0;
  65   1        delayms(5);
  66   1        LCD_RST=1;
  67   1        delayms(5);
  68   1        LCD_CS =0;  //打开片选使能
  69   1      //
  70   1      
  71   1          LCD_Reg_write(0x000,0x0000); delayms(5);
  72   1        LCD_Reg_write(0x000,0x0000); delayms(5);
  73   1        LCD_Reg_write(0x000,0x0000);delayms(5);
  74   1        LCD_Reg_write(0x000,0x0000); delayms(5);
  75   1        delayms(100);
  76   1             LCD_writeData(0x0000);delayms(5);
  77   1          LCD_writeData(0x0000);delayms(5); 
  78   1          LCD_writeData(0x0000);delayms(5); 
  79   1          LCD_writeData(0x0000); delayms(5);
  80   1          delayms(100);
  81   1      
  82   1      
  83   1        LCD_Reg_write(0x400,0x6200);delayms(5);
  84   1        LCD_Reg_write(0x008,0x0808); delayms(5);
  85   1      //  LCD_Reg_write(0x010,0x0010);
  86   1      
  87   1      
  88   1        LCD_Reg_write(0x300,0x0c0c);delayms(5);//GAMMA
  89   1        LCD_Reg_write(0x301,0xff13); delayms(5);
  90   1        LCD_Reg_write(0x302,0x0f0f); delayms(5);
  91   1        LCD_Reg_write(0x303,0x150b); delayms(5);
  92   1      
  93   1        LCD_Reg_write(0x304,0x1020); delayms(5);
  94   1      
  95   1        LCD_Reg_write(0x305,0x0a0b); delayms(5);
  96   1        LCD_Reg_write(0x306,0x0003);delayms(5); 
  97   1        LCD_Reg_write(0x307,0x0d06);  delayms(5);
  98   1        LCD_Reg_write(0x308,0x0504);  delayms(5);
  99   1        LCD_Reg_write(0x309,0x1030);  delayms(5);
 100   1      
 101   1        LCD_Reg_write(0x010,0x001b);delayms(5);   //60Hz
 102   1        LCD_Reg_write(0x011,0x0101);delayms(5);
 103   1        LCD_Reg_write(0x012,0x0000);delayms(5);
 104   1        LCD_Reg_write(0x013,0x0001);delayms(5);
 105   1      
 106   1        LCD_Reg_write(0x100,0x0330);delayms(5);//BT,AP 0x0330
 107   1        LCD_Reg_write(0x101,0x0247);delayms(5);//DC0,DC1,VC
 108   1        LCD_Reg_write(0x103,0x1000);delayms(5);//VDV  //0x0f00
 109   1        LCD_Reg_write(0x280,0xbf00);delayms(5);//VCM
 110   1        LCD_Reg_write(0x102,0xd1b0);delayms(5);//VRH,VCMR,PSON,PON
 111   1      
 112   1        delayms(1220);
 113   1      
 114   1        LCD_Reg_write(0x001,0x0100);delayms(5);
 115   1        LCD_Reg_write(0x002,0x0100);delayms(5);
 116   1        LCD_Reg_write(0x003,0x1030); delayms(5);
 117   1        LCD_Reg_write(0x009,0x0001);delayms(5);
C51 COMPILER V9.01   VIDEO                                                                 08/15/2013 04:13:17 PAGE 3   

 118   1        LCD_Reg_write(0x0C,0x0000);delayms(5);  //MCU interface
 119   1        LCD_Reg_write(0x090,0x8000);delayms(5);
 120   1        LCD_Reg_write(0x00f,0x0000);delayms(5);
 121   1      
 122   1      
 123   1          LCD_Reg_write(0x210,0x0000);delayms(5);
 124   1        LCD_Reg_write(0x211,0x00ef);delayms(5);
 125   1        LCD_Reg_write(0x212,0x0000);delayms(5);
 126   1        LCD_Reg_write(0x213,0x018f); delayms(5);
 127   1      
 128   1        LCD_Reg_write(0x500,0x0000); delayms(5);
 129   1        LCD_Reg_write(0x501,0x0000); delayms(5);
 130   1        LCD_Reg_write(0x502,0x005f); delayms(5);
 131   1        LCD_Reg_write(0x401,0x0001); delayms(5);
 132   1        LCD_Reg_write(0x404,0x0000); delayms(5);
 133   1        delayms(500);
 134   1      
 135   1          LCD_Reg_write(0x0007,0x0100);delayms(5);
 136   1        delayms(1000);
 137   1      
 138   1          LCD_Reg_write(0x200,0x0000);delayms(5);
 139   1        LCD_Reg_write(0x201,0x0000);delayms(5);
 140   1         delayms(500);
 141   1      
 142   1          LCD_WriteIR(0x0202);
 143   1        delayms(500);
 144   1      
 145   1      }
 146          void LCD_areaSelect(uint xStart, uint xEnd, uint yStart, uint yEnd) 
 147          {
 148   1      
 149   1        //set the start RAM address
 150   1        LCD_Reg_write(0x200, xStart); 
 151   1          LCD_Reg_write(0x201, yStart); 
 152   1      
 153   1        //set the window area
 154   1          LCD_Reg_write(0x0210, xStart);
 155   1        LCD_Reg_write(0x211,xEnd);
 156   1          LCD_Reg_write(0x0212,yStart);
 157   1          LCD_Reg_write(0x213,yEnd);
 158   1      
 159   1      
 160   1        LCD_WriteIR(0x0202);
 161   1      }
 162          void  LCD_clear(u16 color)
 163          {
 164   1        uint i;
 165   1         uint j;
 166   1        LCD_areaSelect(0,LCD_SIZE_X-1, 0,LCD_SIZE_Y-1);
 167   1        for(i=0;i<LCD_SIZE_X;i++){
 168   2          for(j=0;j<LCD_SIZE_Y;j++)
 169   2          LCD_writeData(color);
 170   2        }
 171   1      }
 172          
 173          void ChineseChar(uint x,uint y,int size,uint For_color,uint Bk_color ,char c)
 174          {
 175   1         int e=0,i,j;
 176   1         int  ed;
 177   1         
 178   1         uint  ncols;
 179   1         uint  nrows;
C51 COMPILER V9.01   VIDEO                                                                 08/15/2013 04:13:17 PAGE 4   

 180   1         uint  nbytes;
 181   1      
 182   1         uchar *pfont;
 183   1         uchar *pchar;
 184   1         uchar *fonttable[]={(uchar *)hz12,(uchar *)hz16,(uchar *)hz24};
 185   1         
 186   1         pfont=(uchar *)fonttable[size];
 187   1      
 188   1         if(size==0)
 189   1         {
 190   2           ncols =12-1;
 191   2           nrows =12-1;
 192   2           nbytes =24;   //(12*12)/72
 193   2         }
 194   1         else
 195   1         if(size==1)
 196   1         {
 197   2           ncols =16-1;
 198   2           nrows =16-1;
 199   2           nbytes =32;  //(16*16)/72
 200   2         }
 201   1         else
 202   1         if(size==2)
 203   1         {
 204   2           ncols =24-1;
 205   2           nrows =24-1;
 206   2           nbytes =72;   //(24*24)/72
 207   2         }
 208   1         
 209   1         pchar=pfont + (nbytes*(c-1));
 210   1      
 211   1         LCD_areaSelect(x, x+nrows, y,y+ncols);
 212   1         
 213   1         for(i=0;i<nbytes;i++)
 214   1         {
 215   2           ed=*pchar++;
 216   2         if(size==0)
 217   2         {
 218   3             if(i%2==0)
 219   3             e=8;
 220   3             else
 221   3             e=4;
 222   3         }
 223   2         else
 224   2         e=8;
 225   2           
 226   2           for(j=0;j<e;j++)
 227   2           if((ed>>j)&0x01)
 228   2           {
 229   3             LCD_writeData(For_color);  //textcolor
 230   3         }
 231   2           else
 232   2           {
 233   3             LCD_writeData(Bk_color);  //backcolor
 234   3         }
 235   2        }
 236   1      }
 237          void LCD_ShowChar(uint x,uint y,uint For_color,uint Bk_color, char ch)
 238          {       
 239   1         uchar temp;
 240   1         uchar pos,t;
 241   1         /*if(x>(LCD_SIZE_X-CHAR_W)||y>(LCD_SIZE_Y-CHAR_H))
C51 COMPILER V9.01   VIDEO                                                                 08/15/2013 04:13:17 PAGE 5   

 242   1         return;*/
 243   1         LCD_areaSelect(x, x+CHAR_W-1, y,y+CHAR_H-1);
 244   1         ch = ch-32;                       //按照ASCII编码顺序的到相应字母的编码
 245   1         for(pos=0;pos<CHAR_H;pos++)  
 246   1         {
 247   2            temp= Font8x16[ch][pos];
 248   2            for(t=0;t<CHAR_W;t++)
 249   2            {                 
 250   3            if(temp&0x80)
 251   3            LCD_writeData(For_color);  //textcolor
 252   3            else 
 253   3            LCD_writeData(Bk_color);  //backcolor
 254   3              temp<<=1; 
 255   3            } 
 256   2         }
 257   1      }  
 258          /************end middle-level interface******/
 259          
 260          /***********hardware-level interface***/
 261          void LCD_WriteIR(uint value)  
 262          {
 263   1        LCD_CS = 0;
 264   1        LCD_RS  = 0;        // 0: command    1: LCD_DATA
 265   1        
 266   1        LCD_WR  = 0;
 267   1      
 268   1          LCD_DATA  = (uchar)(value>>8) ;
 269   1        LCD_WR  = 1;
 270   1        _nop_();
 271   1        LCD_WR  = 0;
 272   1      
 273   1        LCD_DATA  = (uchar)value;
 274   1          LCD_WR  = 1;
 275   1      _nop_();
 276   1        LCD_CS = 1;
 277   1      }
 278          
 279          void LCD_writeData(uint value)    // color LCD_DATA
 280          {
 281   1      /************2-transfer mode*
 282   1      D15 ... D0 (16bit)
 283   1      is extended to 
 284   1      R5 ... R1  R0 | G5 ...G1 G0 | B5...B1 B0 |(RGB-18bit)
 285   1      D15... D11 D15| D10...D6 D5 | D4...D0 D4 |
 286   1      that is R0=D15,B0=D4
 287   1      *****
 288   1      D15... D11  D10  .. D6 D5 D4...D0
 289   1      R5...  R1   G5    G1 G0 B5   B1 
 290   1      ******/
 291   1        LCD_CS = 0;
 292   1          LCD_RS  = 1;
 293   1        LCD_WR  = 0;
 294   1        LCD_DATA  = (uchar)(value>>8) ;
 295   1        LCD_WR  = 1;
 296   1        LCD_WR  = 0;
 297   1        LCD_DATA  = (uchar)value;
 298   1        LCD_WR  = 1;
 299   1        LCD_CS = 1;
 300   1      }
 301          
 302          void LCD_Reg_write(uint reg,uint value) 
 303          {
C51 COMPILER V9.01   VIDEO                                                                 08/15/2013 04:13:17 PAGE 6   

 304   1         LCD_WriteIR(reg);
 305   1         LCD_writeData(value);
 306   1      }
 307          
 308          /*************end hardware-level interface****************/
 309          
 310          /***********************end LCD***************/
 311          #define _DO_TEST
 312          /**************test some thing****/
 313          #ifdef main
              #undef main
              #endif
 316          #define main test_main
 317          #ifdef main
 318          
 319          
 320          
 321          
 322          
 323          /*********************************************************/
 324          
 325          #endif
 326          #ifdef main
 327          #undef main
 328          #endif
 329          /************end test****/
 330          
 331          static void init(){
 332   1        unsigned  char i; 
 333   1        u16 color;
 334   1         LCD_init();
 335   1      
 336   1         //
 337   1         for(i=1;i<10;i++){
 338   2          ChineseChar((uint)curX++*CHAR_H,(uint)curY*CHAR_H,0,LCD_RGB(0x00ff00),LCD_bkColor,i);
 339   2         }
 340   1         nextLine();
 341   1         //
 342   1         
 343   1        LCD_printf("hello world\n");
 344   1        LCD_printf("I'm eric.!\n");
 345   1        //
 346   1        color=LCD_getTextColor();
 347   1        LCD_setTextColor(LCD_RGB(0xff0000));
 348   1        LCD_printf("Nice to meet you!\n");
 349   1         LCD_setTextColor(color);
 350   1         //
 351   1         LCD_printf("Actually,this is a test program.But i would like to find if there exist any problems.\n");
 352   1         LCD_printf("\n\nAwesome! I like this one! \n(*^-^*) \n");
 353   1        
 354   1         
 355   1      }
 356          uchar strlen(char *str){
 357   1      uchar len=0;
 358   1      while(*str++)len++;
 359   1      return len;
 360   1      }
 361          
 362          static void mainLoop(){
 363   1      #define SELECT 1
 364   1      static uchar state=0;
 365   1      static uchar chars[]="  .-|\/_<>?~!+*#";
C51 COMPILER V9.01   VIDEO                                                                 08/15/2013 04:13:17 PAGE 7   

 366   1      #if SELECT==1
 367   1      uchar i;
 368   1      if(mainLoopCount%1000==0){
 369   2      state=(++state)%strlen(chars);
 370   2      }
 371   1      LCD_putChar(chars[state]);
 372   1      for(i=0;i<8;i++){
 373   2      if(isKeyPress(i)){
 374   3      LCD_printf("\nKey");
 375   3      LCD_putChar(i+'0');
 376   3      LCD_printf(" is pressed!\n");
 377   3      }
 378   2      
 379   2      }
 380   1      #endif
 381   1      
 382   1      #if SELECT==2
                
                
              #endif
 386   1      
 387   1      
 388   1      #if SELECT==0
                
              #endif
 391   1      
 392   1      }
 393          
 394          int video_main(){
 395   1      #ifdef DO_TEST
              test_main();
              #endif
 398   1        init();
 399   1        while(1)
 400   1        {
 401   2          mainLoopCount++;
 402   2          processKey();
 403   2          mainLoop();
 404   2        }
 405   1        return 0;
 406   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2129    ----
   CONSTANT SIZE    =   2430    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27      73
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
