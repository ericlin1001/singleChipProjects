C51 COMPILER V9.01   LEDARR                                                                06/13/2013 21:58:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LEDARR
OBJECT MODULE PLACED IN ledarr.OBJ
COMPILER INVOKED BY: J:\Keil\C51\BIN\C51.EXE ledarr.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "header.h"
   2          #include "key8.h"
   3          #include "ledarr.h"
   4          static ulong mainLoopCount=0;
   5          
   6          /***************ledarr**************/
   7          /**
   8          LEDARR_DATA_PORT controls row.
   9          LEDARR_RED_PORT/LEDARR_GRN_PORT controls cols;
  10          Low----High
  11           |
  12           |
  13           |
  14          High
  15          LEDARR_DATA_PORT is high active.
  16          LEDARR_RED_PORT/LEDARR_GRN_PORT  is low active.
  17          ***/
  18          static uchar ledarr_outputBuffer[8]={0x0,0x0,0x20,0x20,0x7e,0x20,0x20,0};
  19          static uchar ledarr_colSelect[8]={~(1<<0),~(1<<1),~(1<<2),~(1<<3),~(1<<4),~(1<<5),~(1<<6),~(1<<7)};
  20          static uchar ledarr_color=LEDARR_COLOR_RED;
  21          static uchar ledarr_col=0;
  22          BOOL isVetInv=FALSE;
  23          void ledarr_refresh(){
  24   1              ledarr_col++;ledarr_col%=8;
  25   1              LEDARR_DATA_PORT=ledarr_outputBuffer[ledarr_col];
  26   1              if(ledarr_color&0x01){
  27   2                      LEDARR_RED_PORT=ledarr_colSelect[ledarr_col];
  28   2              }else{
  29   2                      LEDARR_RED_PORT=0xff;//close
  30   2              }
  31   1              if(ledarr_color&0x02){
  32   2                      LEDARR_GRN_PORT=ledarr_colSelect[ledarr_col];
  33   2              }else{
  34   2                      LEDARR_GRN_PORT=0xff;//close
  35   2              }
  36   1      }
  37          void ledarr_show(uchar *arr){
  38   1              uchar i;
  39   1              for(i=0;i<8;i++){
  40   2                      if(isVetInv)ledarr_outputBuffer[i]=bit_inv(arr[i]);
  41   2                      else ledarr_outputBuffer[i]=arr[i];
  42   2              }
  43   1      }
  44          void ledarr_horInv(){
  45   1      uchar i;
  46   1              for(i=0;i<8;i++){
  47   2                      ledarr_colSelect[i]=bit_inv(ledarr_colSelect[i]);
  48   2              }
  49   1      
  50   1      }
  51          void ledarr_vetInv(){
  52   1      uchar i;
  53   1              for(i=0;i<8;i++){
  54   2                      ledarr_outputBuffer[i]=bit_inv(ledarr_outputBuffer[i]);
  55   2              }
C51 COMPILER V9.01   LEDARR                                                                06/13/2013 21:58:25 PAGE 2   

  56   1              isVetInv=!isVetInv;
  57   1      }
  58          /***************end ledarr**************/
  59          
  60          #define _DO_TEST
  61          /**************test some thing****/
  62          #ifdef main
              #undef main
              #endif
  65          #define main test_main
  66          #ifdef main
  67          
  68          #endif
  69          #ifdef main
  70          #undef main
  71          #endif
  72          /************end test****/
  73          
  74          unsigned char code digittab[][8]={
  75          {0x00,0x00,0x3e,0x41,0x41,0x41,0x3e,0x00}, //0
  76          {0x00,0x00,0x00,0x00,0x21,0x7f,0x01,0x00}, //1
  77          {0x00,0x00,0x27,0x45,0x45,0x45,0x39,0x00}, //2
  78          {0x00,0x00,0x22,0x49,0x49,0x49,0x36,0x00}, //3
  79          {0x00,0x00,0x0c,0x14,0x24,0x7f,0x04,0x00}, //4
  80          {0x00,0x00,0x72,0x51,0x51,0x51,0x4e,0x00}, //5
  81          {0x00,0x00,0x3e,0x49,0x49,0x49,0x26,0x00}, //6
  82          {0x00,0x00,0x40,0x40,0x40,0x4f,0x70,0x00}, //7
  83          {0x00,0x00,0x36,0x49,0x49,0x49,0x36,0x00}, //8
  84          {0x00,0x00,0x32,0x49,0x49,0x49,0x3e,0x00}, //9
  85          {0x00,0x00,0x7F,0x48,0x48,0x30,0x00,0x00}, //P
  86          {0x00,0x00,0x7F,0x48,0x4C,0x73,0x00,0x00}, //R
  87          {0x00,0x00,0x7F,0x49,0x49,0x49,0x00,0x00}, //E
  88          {0x00,0x00,0x3E,0x41,0x41,0x62,0x00,0x00}, //C
  89          {0x00,0x00,0x7F,0x08,0x08,0x7F,0x00,0x00}, //H
  90          {0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00}, //I
  91          {0x00,0x7F,0x10,0x08,0x04,0x7F,0x00,0x00}, //N
  92          {0x7C,0x48,0x48,0xFF,0x48,0x48,0x7C,0x00}  //ä¸­
  93          };
  94          static void init(){
  95   1      ledarr_show(digittab[0]);
  96   1      ledarr_vetInv();
  97   1      }
  98          
  99          static void mainLoop(){
 100   1      static uchar pWord=0;
 101   1      #define SELECT 1
 102   1      
 103   1      #if SELECT==1
 104   1      if(mainLoopCount%500==0){
 105   2      ledarr_show(digittab[++pWord]);
 106   2      pWord%=12;
 107   2      }
 108   1      
 109   1      if(isKeyPress(0)){
 110   2      ledarr_show(digittab[++pWord]);
 111   2      }
 112   1      if(isKeyPress(1)){
 113   2      ledarr_show(digittab[--pWord]);
 114   2      }
 115   1      if(isKeyPress(2)){
 116   2      ledarr_horInv();
 117   2      }
C51 COMPILER V9.01   LEDARR                                                                06/13/2013 21:58:25 PAGE 3   

 118   1      if(isKeyPress(3)){
 119   2      ledarr_vetInv();
 120   2      }
 121   1      if(isKeyPress(4)){
 122   2      ledarr_color=LEDARR_COLOR_RED;
 123   2      }
 124   1      if(isKeyPress(5)){
 125   2      ledarr_color=LEDARR_COLOR_GRN;
 126   2      }
 127   1      if(isKeyPress(6)){
 128   2      ledarr_color=LEDARR_ORG;
 129   2      }
 130   1      if(isKeyPress(7)){
 131   2      ledarr_color=LEDARR_COLOR_NONE;
 132   2      }
 133   1      #endif
 134   1      
 135   1      #if SELECT==2
                      
              #endif
 138   1      #if SELECT==0
                      
              #endif
 141   1      
 142   1      
 143   1      
 144   1      }
 145          
 146          
 147          int ledarr_main(){
 148   1      #ifdef DO_TEST
              test_main();
              #endif
 151   1              mainLoopCount=0;
 152   1              init();
 153   1              while(1)
 154   1              {
 155   2                      processKey();
 156   2                      ledarr_refresh();
 157   2                      mainLoop();
 158   2                      mainLoopCount++;
 159   2              }
 160   1              return 0;
 161   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =    144    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
