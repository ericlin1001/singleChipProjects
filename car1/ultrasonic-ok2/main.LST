C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: J:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          
   3          
   4          #include<stdlib.h>
   5          #include "header.h"
   6          
   7          #include "algorithm.h"
   8          #include "ultrasonic.h"
   9          
  10          
  11          #define EXT1
  12          #define ULTRA1
  13          #define TIM1
  14          /*
  15          TimeType timeBuffer0[Buffer_len];
  16          uchar pBuffer0=0;//point to the current data.
  17          
  18          TimeType timeBuffer1[Buffer_len];
  19          uchar pBuffer1=0;//point to the current data.
  20          */
  21          /*
  22            len(mm)*100/17=time(us)
  23          */
  24          
  25          
  26          /**************
  27            program restriction:
  28            detect distance:2cm~11m
  29           ***/
  30          
  31          static uchar isWaitForData0=0;
  32          static uchar countForResend0=0;
  33          static uchar isReceivingData0=0; 
  34          
  35          static uchar isWaitForData1=0;
  36          static uchar countForResend1=0;
  37          static uchar isReceivingData1=0; 
  38          
  39          void ultrasonicOk0(TimeType durTime);
  40          void ultrasonicOk1(TimeType durTime);
  41          
  42          static void init(){
  43   1        ENABLE_ALL_INT;
  44   1      
  45   1        ENABLE_TIMER1;
  46   1        //TIMER1_INIT(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1));
  47   1        TIMER1_STOP;
  48   1      
  49   1        ENABLE_TIMER0;
  50   1        //TIMER0_INIT(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1));
  51   1        TMOD=(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1))|(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1))<<4;
  52   1        TIMER0_STOP;
  53   1        //
  54   1        DISABLE_EXTINT1;
  55   1        DISABLE_EXTINT0;
C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 2   

  56   1        EXTINT1_MODE_TRIG(1);//negative edge trigger.
  57   1        EXTINT0_MODE_TRIG(1);
  58   1      }
  59          
  60          
  61          timer1() interrupt 3  
  62          {
  63   1        //Error!!!!
  64   1        isWaitForData1=0;
  65   1        TIMER1_STOP;
  66   1        DISABLE_EXTINT1;
  67   1      }
  68          
  69          timer0() interrupt 1
  70          {
  71   1        //Error!!!!
  72   1        isWaitForData0=0;
  73   1        TIMER0_STOP;
  74   1        DISABLE_EXTINT0;
  75   1      }
  76          
  77          void ultrasonicInit(){
  78   1        ULTRA1_TRIG_PIN=0;
  79   1        ULTRA0_TRIG_PIN=0;
  80   1      }
  81          
  82          void ultrasonicTrigger0(){
  83   1        //had better be reinvoked after    60ms
  84   1        //keep a 10us, high level 
  85   1        //using timer1 to count the time.
  86   1        uchar i;
  87   1        #define MAX_COUNTFORRESEND 10
  88   1        if(isWaitForData0){
  89   2          //it means ,the last time data haven't recevied!.
  90   2          countForResend0++;
  91   2          if(countForResend0>=MAX_COUNTFORRESEND){
  92   3            countForResend0=0;
  93   3            isWaitForData0=0;
  94   3          }
  95   2        }else{
  96   2          //normally trigger the ultrasonic.
  97   2          isWaitForData0=1;
  98   2        
  99   2          TIMER0_SET(65536);
 100   2          TIMER0_START;//however,it only count for 
 101   2      
 102   2          
 103   2          /****start trigger****/
 104   2          ULTRA0_TRIG_PIN=1;//keep high level for 10us.
 105   2          for(i=0;i<5;i++);
 106   2          ULTRA0_TRIG_PIN=0;
 107   2      
 108   2          /****end trigger******/
 109   2      
 110   2          /***start receive***/
 111   2          ENABLE_EXTINT0;
 112   2        }
 113   1      }
 114          
 115          void ultrasonicTrigger1(){
 116   1        //had better be reinvoked after    60ms
 117   1        //keep a 10us, high level 
C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 3   

 118   1        //using timer1 to count the time.
 119   1        uchar i;
 120   1        if(isWaitForData1){
 121   2          //it means ,the last time data haven't recevied!.
 122   2          countForResend1++;
 123   2          if(countForResend1>=MAX_COUNTFORRESEND){
 124   3            countForResend1=0;
 125   3            isWaitForData1=0;
 126   3          }
 127   2        }else{
 128   2          //normally trigger the ultrasonic.
 129   2          isWaitForData1=1;
 130   2        
 131   2          TIMER1_SET(65536);
 132   2          TIMER1_START;//however,it only count for 
 133   2        
 134   2          
 135   2          ULTRA1_TRIG_PIN=1;//keep high level for 10us.
 136   2          for(i=0;i<5;i++);
 137   2          ULTRA1_TRIG_PIN=0;
 138   2      
 139   2        
 140   2          ENABLE_EXTINT1;
 141   2        }
 142   1      }
 143          
 144          
 145          void ultrasonicReceive0(){
 146   1        u16 temp=0;
 147   1        if(!isReceivingData0 && isWaitForData0){//to avoid reenter this function!.
 148   2          isReceivingData0=1;
 149   2          /******save the time used to timeAfterUltrasonic****/
 150   2          temp=TH0;
 151   2          temp<<=8;
 152   2          temp|=TL0;
 153   2          if(temp<10){
 154   3            isReceivingData0=0;
 155   3            return;
 156   3          }
 157   2          /****stop timer1,and externel INT!****/
 158   2          TIMER0_STOP;
 159   2          DISABLE_EXTINT0;
 160   2          ultrasonicOk0(temp*17/100);
 161   2          isReceivingData0=0;
 162   2          isWaitForData0=0;
 163   2        }
 164   1      }
 165          
 166          void ultrasonicReceive1(){
 167   1        u16 temp=0;
 168   1        if(!isReceivingData1 && isWaitForData1){//to avoid reenter this function!.
 169   2          isReceivingData1=1;
 170   2          /******save the time used to timeAfterUltrasonic****/
 171   2          temp=TH1;
 172   2          temp<<=8;
 173   2          temp|=TL1;
 174   2          if(temp<10){
 175   3            isReceivingData1=0;
 176   3            return;
 177   3          }
 178   2          /****stop timer1,and externel INT!****/
 179   2          TIMER1_STOP;
C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 4   

 180   2          DISABLE_EXTINT1;
 181   2          ultrasonicOk1(temp*17/100);
 182   2          isReceivingData1=0;
 183   2          isWaitForData1=0;
 184   2        }
 185   1      }
 186          
 187          void initBuffer(){
 188   1        //take care of the init value.
 189   1        /*uchar i;
 190   1        for(i=0;i<Buffer_len;i++){
 191   1          timeBuffer1[i]=0;
 192   1          timeBuffer0[i]=0;
 193   1        }*/
 194   1      
 195   1      }
 196          
 197          externlInt0() interrupt 0
 198          {
 199   1        ultrasonicReceive0();
 200   1      } 
 201          
 202          externlInt1() interrupt 2
 203          {
 204   1        ultrasonicReceive1();
 205   1      } 
 206          volatile TimeType t0=0xffff,t1=0xffff;
 207          void tt();
 208          void ultrasonicOk1(TimeType durTime){
 209   1        //t0=filterData(timeBuffer0,durTime,&pBuffer0);
 210   1        t0=durTime;
 211   1        tt();
 212   1      }
 213          void ultrasonicOk0(TimeType durTime){
 214   1      //t1=filterData(timeBuffer1,durTime,&pBuffer1);
 215   1        t1=durTime;
 216   1        tt();
 217   1      }
 218          //**************************
 219          
 220          sbit leftWheelControl0=P1^1;
 221          sbit leftWheelControl1=P1^0;
 222          
 223          sbit rightWheelControl1=P1^2;
 224          sbit rightWheelControl0=P1^3;
 225          
 226          #define LeftWheel_Stop    {leftWheelControl0=0;leftWheelControl1=0;}
 227          #define LeftWheel_Forward   {leftWheelControl0=1;leftWheelControl1=0;}
 228          #define LeftWheel_Backward  {leftWheelControl0=0;leftWheelControl1=1;}
 229          
 230          #define RightWheel_Stop     {rightWheelControl0=0;rightWheelControl1=0;}
 231          #define RightWheel_Forward    {rightWheelControl0=1;rightWheelControl1=0;}
 232          #define RightWheel_Backward   {rightWheelControl0=0;rightWheelControl1=1;}
 233          
 234          #define LeftHighWidth  800
 235          #define LeftLowWidth  180
 236          //100 left >right
 237          
 238          #define RightHighWidth  100
 239          #define RightLowWidth 0
 240          
 241          //************************************
C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 5   

 242          
 243          
 244          ulong myRandLong(){
 245   1        ulong temp=0;
 246   1         temp=rand();
 247   1         temp*=rand();
 248   1         return temp;
 249   1      }
 250          
 251          
 252          void controlLeftRight(u16 leftDur,u16 rightDur){
 253   1        if(rand()%2==0){
 254   2          if(rand()%1000<leftDur){
 255   3          LeftWheel_Forward
 256   3          }else{
 257   3          LeftWheel_Stop
 258   3          } 
 259   2          
 260   2          if(rand()%1000<rightDur){
 261   3          RightWheel_Forward
 262   3          }else{
 263   3          RightWheel_Stop
 264   3          } 
 265   2        }else{
 266   2          if(rand()%1000<rightDur){
 267   3            RightWheel_Forward
 268   3            }else{
 269   3            RightWheel_Stop
 270   3            } 
 271   2          if(rand()%1000<leftDur){
 272   3            LeftWheel_Forward
 273   3            }else{
 274   3            LeftWheel_Stop
 275   3            } 
 276   2        }
 277   1      
 278   1      }
 279          
 280          u16 speed=1000;
 281          void backward(u16 leftDur,u16 rightDur){
 282   1      if(rand()%2==0){
 283   2          if(rand()%1000<leftDur){
 284   3          LeftWheel_Backward
 285   3          }else{
 286   3          LeftWheel_Stop
 287   3          } 
 288   2          
 289   2          if(rand()%1000<rightDur){
 290   3          RightWheel_Backward
 291   3          }else{
 292   3          RightWheel_Stop
 293   3          } 
 294   2        }else{
 295   2          if(rand()%1000<rightDur){
 296   3            RightWheel_Backward
 297   3            }else{
 298   3            RightWheel_Stop
 299   3            } 
 300   2          if(rand()%1000<leftDur){
 301   3            LeftWheel_Backward
 302   3            }else{
 303   3            LeftWheel_Stop
C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 6   

 304   3            } 
 305   2        }
 306   1      
 307   1      }
 308          
 309          void forward(){
 310   1        controlLeftRight(speed,speed);
 311   1      }
 312          void left(){
 313   1        controlLeftRight(speed,100);
 314   1      }
 315          void right(){
 316   1        controlLeftRight(100,speed);
 317   1      }
 318          void turnLeft(){
 319   1      right();
 320   1      }
 321          void turnRight(){
 322   1      left();
 323   1      }
 324          
 325          
 326          
 327          ulong temp_time;
 328          #define doTime(m) temp_time=m*80;while(temp_time--)
 329          
 330          
 331          #define MODE_FORWARD 0
 332          #define MODE_LEFT 1
 333          #define MODE_B 1
 334          volatile uchar mode=0;
 335          volatile s16 vr,vl;
 336          volatile s16 vx=0,vy=-1000;
 337          volatile s16 fx=0,fy;
 338          volatile uchar isChange=1;
 339          void tt(){
 340   1      isChange=1;
 341   1      }
 342          
 343          
 344          
 345          
 346          void controlLeftWheel(s16 v){
 347   1        if(v>=0){
 348   2          if(rand()%1000<v){
 349   3            LeftWheel_Forward
 350   3          }else{
 351   3            LeftWheel_Stop
 352   3          } 
 353   2        }else{
 354   2          v=-v;
 355   2          if(rand()%1000<v){
 356   3            LeftWheel_Backward
 357   3          }else{
 358   3            LeftWheel_Stop
 359   3          } 
 360   2        }
 361   1      }     
 362          void controlRightWheel(s16 v){
 363   1        if(v>=0){
 364   2          if(rand()%1000<v){
 365   3            RightWheel_Forward
C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 7   

 366   3          }else{
 367   3            RightWheel_Stop
 368   3          } 
 369   2        }else{
 370   2          v=-v;
 371   2          if(rand()%1000<v){
 372   3            RightWheel_Backward
 373   3          }else{
 374   3            RightWheel_Stop
 375   3          } 
 376   2        }
 377   1      }
 378          /*
 379          void calForce(){
 380          fx=0;
 381          fy=100;
 382          if(t0>500 && t1>500){
 383          //safe area.
 384          }else{
 385            if(t0<100){
 386              fx+=500;
 387              fy+=-800;
 388            }
 389            if(t1<100){
 390              fx+=-500;
 391              fy+=-800;
 392            }
 393            if(t0>200&&t1>200){
 394              fx+=t1;
 395              fx=-t0;
 396              //
 397              fy-=(t1+t0)/10;
 398            }
 399          }
 400          }*/
 401          
 402          void calForce(){
 403   1        fx=0;
 404   1        fy=400;
 405   1        if(t1<300&&t0<300){
 406   2          fy-=800;
 407   2          fx+=t0;
 408   2          fx-=t1;
 409   2        }
 410   1        if(t1<200&&t0<200){
 411   2          fy-=1000;
 412   2          fx+=t0;
 413   2          fx-=t1;
 414   2        }
 415   1      }
 416          
 417          void controlMotors(){
 418   1      #define LIMIT(x,min,max) if(x>max)x=max;else if(x<min)x=min;
 419   1      
 420   1      if(isChange){
 421   2        calForce();
 422   2        vx+=fx;
 423   2        vy+=fy;
 424   2      
 425   2        LIMIT(vx,-1000,1000);
 426   2        LIMIT(vy,-1000,1000);
 427   2        
C51 COMPILER V9.01   MAIN                                                                  08/31/2013 20:24:46 PAGE 8   

 428   2        vl=vy+vx;
 429   2        vr=vy-vx;
 430   2        isChange=0;
 431   2      }
 432   1      
 433   1      controlLeftWheel(vl);
 434   1      controlRightWheel(vr);
 435   1      }
 436          /*
 437          void motorInitAction(){
 438            doTime(2)
 439            forward();
 440          
 441            doTime(5)
 442            left();
 443          
 444            doTime(5)
 445            right();
 446            
 447            doTime(5)
 448            forward();
 449          }
 450          */
 451          void test(){
 452   1      uchar i;
 453   1        //motorInitAction();
 454   1        while(1){
 455   2          if(++i%5==0){
 456   3            ultrasonicTrigger0();
 457   3            ultrasonicTrigger1();
 458   3          }
 459   2          //for(i=0;i<5;i++)
 460   2          controlMotors();
 461   2        }
 462   1      }
 463          void main(void){
 464   1        init();
 465   1        initBuffer();
 466   1        delayms(1000);
 467   1        test();
 468   1        while(1);
 469   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1264    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
