C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: J:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<stdlib.h>
   2          #include "header.h"
   3          #include "key8.h"
   4          #include "algorithm.h"
   5          #include "ultrasonic.h"
   6          #define LIMIT(x,min,max) if(x>max)x=max;else if(x<min)x=min;
   7          /*
   8          TimeType timeBuffer0[Buffer_len];
   9          uchar pBuffer0=0;//point to the current data.
  10          
  11          TimeType timeBuffer1[Buffer_len];
  12          uchar pBuffer1=0;//point to the current data.
  13          */
  14          /*
  15            len(mm)*100/17=time(us)
  16          */
  17          void tt();
  18          volatile TimeType t0=0xffff,t1=0xffff;
  19          /**************
  20            program restriction:
  21            detect distance:2cm~11m
  22           ***/
  23          
  24          static uchar isWaitForData0=0;
  25          static uchar countForResend0=0;
  26          static uchar isReceivingData0=0;
  27          
  28          static uchar isWaitForData1=0;
  29          static uchar countForResend1=0;
  30          static uchar isReceivingData1=0;
  31          
  32          void ultrasonicOk0(TimeType durTime);
  33          void ultrasonicOk1(TimeType durTime);
  34          
  35          static void init(){
  36   1        ENABLE_ALL_INT;
  37   1      
  38   1        ENABLE_TIMER1;
  39   1        //TIMER1_INIT(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1));
  40   1        TIMER1_STOP;
  41   1      
  42   1        ENABLE_TIMER0;
  43   1        //TIMER0_INIT(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1));
  44   1        TMOD=(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1))|(TIMER_GATE(1)|TIMER_TC(0)|TIMER_MODE(1))<<4;
  45   1        TIMER0_STOP;
  46   1        //
  47   1        DISABLE_EXTINT1;
  48   1        DISABLE_EXTINT0;
  49   1        EXTINT1_MODE_TRIG(1);//negative edge trigger.
  50   1        EXTINT0_MODE_TRIG(1);
  51   1      }
  52          
  53          
  54          timer1() interrupt 3
  55          {
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 2   

  56   1        //Error!!!!
  57   1        isWaitForData1=0;
  58   1        TIMER1_STOP;
  59   1        DISABLE_EXTINT1;
  60   1        if(t1<3000)t1+=200;
  61   1        tt();
  62   1      }
  63          
  64          timer0() interrupt 1
  65          {
  66   1        //Error!!!!
  67   1        isWaitForData0=0;
  68   1        TIMER0_STOP;
  69   1        DISABLE_EXTINT0;
  70   1        if(t0<3000)t0+=200;
  71   1        tt();
  72   1      }
  73          
  74          void ultrasonicInit(){
  75   1        ULTRA1_TRIG_PIN=0;
  76   1        ULTRA0_TRIG_PIN=0;
  77   1      }
  78          
  79          void ultrasonicTrigger0(){
  80   1        //had better be reinvoked after    60ms
  81   1        //keep a 10us, high level
  82   1        //using timer1 to count the time.
  83   1        uchar i;
  84   1        #define MAX_COUNTFORRESEND 10
  85   1        if(isWaitForData0){
  86   2          //it means ,the last time data haven't recevied!.
  87   2          countForResend0++;
  88   2          if(countForResend0>=MAX_COUNTFORRESEND){
  89   3            countForResend0=0;
  90   3            isWaitForData0=0;
  91   3          }
  92   2        }else{
  93   2          //normally trigger the ultrasonic.
  94   2          isWaitForData0=1;
  95   2      
  96   2          TIMER0_SET(65536);
  97   2          TIMER0_START;//however,it only count for
  98   2      
  99   2      
 100   2          /****start trigger****/
 101   2          ULTRA0_TRIG_PIN=1;//keep high level for 10us.
 102   2          for(i=0;i<5;i++);
 103   2          ULTRA0_TRIG_PIN=0;
 104   2      
 105   2          /****end trigger******/
 106   2      
 107   2          /***start receive***/
 108   2          ENABLE_EXTINT0;
 109   2        }
 110   1      }
 111          
 112          void ultrasonicTrigger1(){
 113   1        //had better be reinvoked after    60ms
 114   1        //keep a 10us, high level
 115   1        //using timer1 to count the time.
 116   1        uchar i;
 117   1        if(isWaitForData1){
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 3   

 118   2          //it means ,the last time data haven't recevied!.
 119   2          countForResend1++;
 120   2          if(countForResend1>=MAX_COUNTFORRESEND){
 121   3            countForResend1=0;
 122   3            isWaitForData1=0;
 123   3          }
 124   2        }else{
 125   2          //normally trigger the ultrasonic.
 126   2          isWaitForData1=1;
 127   2      
 128   2          TIMER1_SET(65536);
 129   2          TIMER1_START;//however,it only count for
 130   2      
 131   2      
 132   2          ULTRA1_TRIG_PIN=1;//keep high level for 10us.
 133   2          for(i=0;i<5;i++);
 134   2          ULTRA1_TRIG_PIN=0;
 135   2      
 136   2          ENABLE_EXTINT1;
 137   2      
 138   2      
 139   2        }
 140   1      }
 141          void ultrasonicReceive0(){
 142   1        u16 temp=0;
 143   1        if(!isReceivingData0 && isWaitForData0){//to avoid reenter this function!.
 144   2          isReceivingData0=1;
 145   2          /******save the time used to timeAfterUltrasonic****/
 146   2          temp=TH0;
 147   2          temp<<=8;
 148   2          temp|=TL0;
 149   2          if(temp<10){
 150   3            isReceivingData0=0;
 151   3            return;
 152   3          }
 153   2          /****stop timer1,and externel INT!****/
 154   2          TIMER0_STOP;
 155   2          DISABLE_EXTINT0;
 156   2          ultrasonicOk0(temp*17/100);
 157   2          isReceivingData0=0;
 158   2          isWaitForData0=0;
 159   2        }
 160   1      }
 161          
 162          void ultrasonicReceive1(){
 163   1        u16 temp=0;
 164   1        if(!isReceivingData1 && isWaitForData1){//to avoid reenter this function!.
 165   2          isReceivingData1=1;
 166   2          /******save the time used to timeAfterUltrasonic****/
 167   2          temp=TH1;
 168   2          temp<<=8;
 169   2          temp|=TL1;
 170   2          if(temp<10){
 171   3            isReceivingData1=0;
 172   3            return;
 173   3          }
 174   2          /****stop timer1,and externel INT!****/
 175   2          TIMER1_STOP;
 176   2          DISABLE_EXTINT1;
 177   2          ultrasonicOk1(temp*17/100);
 178   2          isReceivingData1=0;
 179   2          isWaitForData1=0;
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 4   

 180   2        }
 181   1      }
 182          
 183          void initBuffer(){
 184   1        //take care of the init value.
 185   1        /*uchar i;
 186   1        for(i=0;i<Buffer_len;i++){
 187   1          timeBuffer1[i]=0;
 188   1          timeBuffer0[i]=0;
 189   1        }*/
 190   1      }
 191          
 192          externlInt0() interrupt 0
 193          {
 194   1        ultrasonicReceive0();
 195   1      }
 196          
 197          externlInt1() interrupt 2
 198          {
 199   1        ultrasonicReceive1();
 200   1      }
 201          
 202          
 203          void ultrasonicOk1(TimeType durTime){
 204   1      //t1=filterData(timeBuffer1,durTime,&pBuffer1);
 205   1        t1=durTime;
 206   1        tt();
 207   1      }
 208          void ultrasonicOk0(TimeType durTime){
 209   1      //t0=filterData(timeBuffer0,durTime,&pBuffer0);
 210   1        t0=durTime;
 211   1        tt();
 212   1      }
 213          //**************************
 214          
 215          ulong temp_time;
 216          #define doTime(m) temp_time=m;while(temp_time--)
 217          
 218          
 219          
 220          #define MODE_FORWARD 0
 221          #define MODE_LEFT 1
 222          #define MODE_B 1
 223          volatile uchar mode=0;
 224          volatile s16 speed;
 225          volatile s16 vr,vl;
 226          volatile s16 vx=0,vy=-1000;
 227          volatile s16 fx=0,fy;
 228          volatile uchar isChange=1;
 229          
 230          
 231          
 232          void controlMotors(){
 233   1      }
 234          
 235          
 236          void test(){
 237   1      uchar i=9;
 238   1      while(1)
 239   1        //motorInitAction();
 240   1        while(1){
 241   2          if(++i%10==0){
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 5   

 242   3            ultrasonicTrigger0();
 243   3            ultrasonicTrigger1();
 244   3      
 245   3          }
 246   2          controlMotors();
 247   2        }
 248   1      }
 249          
 250          void mydelay(u16 us)   //误差 0us
 251          {
 252   1      unsigned char a,b;
 253   1      if(us<=0)return;
 254   1      while(us--){
 255   2          for(b=1;b>0;b--)
 256   2              for(a=2;a>0;a--);
 257   2          }
 258   1      }
 259          
 260          #define TURN_MOTOR P0_0
 261          void doAngle(s16 a){
 262   1        /*uchar i=5;
 263   1        a+=25;
 264   1        while(i--){
 265   1          TURN_MOTOR=1;
 266   1          mydelay(a);
 267   1          TURN_MOTOR=0;
 268   1          mydelay(700-a);
 269   1        }*/
 270   1        uchar i=5;
 271   1        a+=43;
 272   1        while(i--){
 273   2          TURN_MOTOR=1;
 274   2          mydelay(a);
 275   2          TURN_MOTOR=0;
 276   2          mydelay(1800-a);
 277   2        }
 278   1      }
 279          #define DELAYTIME 1000
 280          //0xe2~
 281          //11~43
 282          //+20
 283          //31-63
 284          //0-32
 285          void initAction(){
 286   1      P0=0x33;
 287   1        delayms(DELAYTIME);
 288   1        P0=0xff;
 289   1        delayms(DELAYTIME);
 290   1      }
 291          void testTurnMotor(){
 292   1        while(1){
 293   2          doAngle(-14);
 294   2          delayms(DELAYTIME);
 295   2          doAngle(14);
 296   2          delayms(DELAYTIME);
 297   2          doAngle(0);
 298   2          delayms(DELAYTIME);
 299   2        }
 300   1      }
 301          
 302          #define MOTOR0 P1_2
 303          #define MOTOR1 P1_3
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 6   

 304          
 305          #define MOTOR_FORWARD {MOTOR0=0;MOTOR1=1;}
 306          #define MOTOR_STOP {MOTOR0=0;MOTOR1=0;}
 307          #define MOTOR_BACKWARD {MOTOR0=1;MOTOR1=0;}
 308          
 309          void doMotor(s16 speed){
 310   1        uchar isBack=0;
 311   1        if(speed<0){
 312   2          isBack=1;
 313   2          speed=-speed;
 314   2        }
 315   1        if(rand()%1000<speed){
 316   2          if(isBack){
 317   3          MOTOR_BACKWARD;
 318   3          }else{
 319   3          MOTOR_FORWARD;
 320   3          }
 321   2        }else{
 322   2          MOTOR_STOP;
 323   2        }
 324   1      }
 325          void tt(){
 326   1        //s16 angle;
 327   1        //speed=t0+800;
 328   1        //LIMIT(speed,-1000,1000);
 329   1        /*if(t1<200){
 330   1          doAngle(14);
 331   1        }else{
 332   1          doAngle(-14);
 333   1        }*/
 334   1        speed=t1*2+500;
 335   1        LIMIT(speed,-1000,1000);
 336   1        /*if(t0<300){
 337   1          if(t1>350){
 338   1            doAngle(-14);
 339   1          }else{
 340   1            doAngle(14);
 341   1          }
 342   1        }else{
 343   1          doAngle(0);
 344   1        }
 345   1      
 346   1        */
 347   1        //P0=~(t0/10);
 348   1      }
 349          
 350          void testUltra(){
 351   1        while(1){
 352   2          ultrasonicTrigger0();
 353   2          ultrasonicTrigger1();
 354   2          delayms(20);
 355   2        }
 356   1      }
 357          /*
 358          void testMotor(){
 359            s16 speed=800;
 360            while(1){
 361              if(isKeyPress(0)){
 362                speed+=100;
 363              }
 364              if(isKeyPress(1)){
 365                speed-=100;
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 7   

 366              }
 367              if(isKeyPress(2)){
 368                speed=800;
 369              }
 370              if(isKeyPress(3)){
 371                speed=-speed;
 372              }
 373              P0=speed/100;
 374              processKey();
 375              doMotor(speed);
 376            }
 377          }
 378          */
 379          void doDelay(u16 us){
 380   1      unsigned char a,b,c;
 381   1        while(--us){
 382   2          for(c=1;c>0;c--)
 383   2              for(b=142;b>0;b--)
 384   2                  for(a=2;a>0;a--);
 385   2          }
 386   1      }
 387          
 388          #define TESTPIN P0
 389          void main(void){
 390   1        s16 a=0;
 391   1        u16 b=0;
 392   1        s16 k=0;
 393   1      
 394   1        //testTurnMotor();
 395   1        init();
 396   1        //initAction();
 397   1        mydelay(5000);
 398   1        doAngle(0);
 399   1        speed=1000;
 400   1        while(1){
 401   2          if(++a%10==0){
 402   3            ultrasonicTrigger0();
 403   3            ultrasonicTrigger1();
 404   3          }
 405   2          //delayms(20);
 406   2          doMotor(speed);
 407   2        }
 408   1      
 409   1      
 410   1        testMotor();
*** WARNING C206 IN LINE 410 OF MAIN.C: 'testMotor': missing function-prototype
 411   1      
 412   1        while(1)
 413   1        for(k=-20;k<20;k++){
 414   2          doAngle(k);
 415   2        }
 416   1        while(1){
 417   2        doAngle(0);
 418   2        }
 419   1      
 420   1      
 421   1      
 422   1      
 423   1        while(1);
 424   1      }
 425          /*
 426            testTurnMotor();
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 8   

 427            testMotor();
 428            testUltra();
 429            while(1);
 430            init();
 431            //initBuffer();
 432            //delayms(1000);
 433            test();*/
 434          //P1=0;
 435            /*while(1){
 436              for(a=0;a<65535/3;a++)
 437              P2=0xff;
 438              for(a=0;a<65535/3;a++)
 439              P2=0;
 440              //delayms(1000);
 441            }
 442            doAngle(0);
 443            testTurnMotor();*/
 444            /*
 445            while(1){
 446          
 447              doAngle(-14);
 448              delayms(DELAYTIME);
 449              doAngle(14);
 450              delayms(DELAYTIME);
 451              doAngle(0);
 452              delayms(DELAYTIME);
 453            }
 454          
 455            testTurnMotor();
 456            while(1){
 457              P1_2=0;
 458              doAngle(0);
 459            }*/
 460            /*while(1){
 461              P1=0;
 462              delayms(2000);
 463              P1=0xff;
 464              delayms(2000);
 465            }*/
 466            /*while(1){
 467              doAngle(14);
 468              delayms(200);
 469              doAngle(-14);
 470              delayms(200);
 471            }*/
 472            //testUltra();
 473            //testUltra();
 474          
 475          /*while(1){
 476              if(isKeyPress(0)){
 477                a++;
 478                doAngle(a);
 479              }
 480              if(isKeyPress(1)){
 481                a--;
 482                doAngle(a);
 483              }
 484              if(isKeyPress(2)){
 485                a=0;
 486                doAngle(a);
 487              }
 488              P1=a;
C51 COMPILER V9.01   MAIN                                                                  09/05/2013 12:27:40 PAGE 9   

 489              processKey();
 490            }*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    951    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
